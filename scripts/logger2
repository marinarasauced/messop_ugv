#!/usr/bin/env python

import rospy
from geometry_msgs.msg import TransformStamped, Twist
from mess_msgs.msg import CalibrateUGV, MessToUGVLogger, StateUGV
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Imu, JointState
from std_msgs.msg import String
import numpy as np
import time
import csv

##################################################################################

# Object name in VICON Tracker:
UGV_NAME = rospy.get_param("topic_prefix", "ugv")

##################################################################################

MSG01 = """
Initializing TurtleBot3 onboard logger

CTRL-C to quit
-----------------------------------------
"""

MSG02 = """
Logging data to .csv files in current directory
"""

MSG03 = """
Data logged to .csv files in current directory
"""

MSG04 = """
Communication ended
"""

##################################################################################

def log_data(array, name):
    np.savetxt("/home/ubuntu/catkin_ws/logs/" + name, array, delimiter="y")

def append_data(array, new_row):
    array = np.vstack([array, new_row])

def calibration_parameters(data):
    new_row = np.array([[time.time(), data.C1, data.C2, data.C3, data.C4, data.C5, data.C6, data.C7]])
    append_data(data_calibration_parameters, new_row)

def control_input(data):
    new_row = np.array([[time.time(), data.linear.x, data.angular.z]])
    append_data(data_control_input, new_row)

def imu_raw(data):
    Qx = data.orientation.x
    Qy = data.orientation.y
    Qz = data.orientation.z
    Qw = data.orientation.w
    Vx = data.angular_velocity.x
    Vy = data.angular_velocity.y
    Vz = data.angular_velocity.z
    Ax = data.linear_acceleration.x
    Ay = data.linear_acceleration.y
    Az = data.linear_acceleration.z
    new_row = np.array([[time.time(), Qx, Qy, Qz, Qw, Vx, Vy, Vz, Ax, Ay, Az]])
    append_data(data_imu_raw, new_row)

def odom_calibrated(data):
    new_row = np.array([[time.time(), data.Tx, data.Ty, data.Rz]])
    append_data(data_odom_calibrated, new_row)

def odom_raw(data):
    Tx = data.pose.pose.position.x
    Ty = data.pose.pose.position.y
    Tz = data.pose.pose.position.z
    Qx = data.pose.pose.orientation.x
    Qy = data.pose.pose.orientation.y
    Qz = data.pose.pose.orientation.z
    Qw = data.pose.pose.orientation.w
    new_row = np.array([[time.time(), Tx, Ty, Tz, Qx, Qy, Qz, Qw]])
    append_data(data_odom_raw, new_row)

def state_onboard(data):
    new_row = np.array([[time.time(), data.Tx, data.Ty, data.Rz]])
    append_data(data_state_onboard, new_row)

def vicon_calibrated(data):
    new_row = np.array([[time.time(), data.Tx, data.Ty, data.Rz]])
    append_data(data_vicon_calibrated, new_row)

def vicon_raw(data):
    Tx = data.transform.translation.x
    Ty = data.transform.translation.y
    Tz = data.transform.translation.z
    Qx = data.transform.rotation.x
    Qy = data.transform.rotation.y
    Qz = data.transform.rotation.z
    Qw = data.transform.rotation.w
    new_row = np.array([[time.time(), Tx, Ty, Tz, Qx, Qy, Qz, Qw]])
    append_data(data_vicon_raw, new_row)

def joints(data):
    jointV = data.velocity
    jointE = data.effort
    new_row = np.array([[time.time(), jointV[0], jointV[1], jointE[0], jointE[1]]])
    append_data(data_wheels, new_row)

##################################################################################

if __name__=="__main__":

    # Initialize node:
    rospy.init_node("messlogger_ugv")

    # Calibration parameters:
    data_calibration_parameters = np.array([["time (s)", "c1", "c2", "c3", "c4", "c5", "c6", "c7"]])
    rospy.Subscriber("messop/logger/coefficients", CalibrateUGV, calibration_parameters)

    # Control input:
    data_control_input = np.array([["time (s)", "lin vel (m/s)", "ang vel (rad/s)"]])
    rospy.Subscriber("cmd_vel", Twist, control_input)

    # IMU raw:
    data_imu_raw = np.array([["time (s)", "x-quat", "y-quat", "z-quat", "w-quat", "x-ang vel", "y-ang vel", "z-ang vel", "x-lin accel", "y-lin accel", "z-lin accel"]])
    rospy.Subscriber("imu", Imu, imu_raw)

    # Odometry calibrated:
    data_odom_calibrated = np.array([["time (s)", "x-pos (m)", "y-pos (m)", "z-rot (rad)"]])
    rospy.Subscriber("messop/logger/odom", StateUGV, odom_calibrated)

    # Odometry raw:
    data_odom_raw = np.array([["time (s)", "x-pos (m)", "y-pos (m)", "z-pos (m)", "x-quat", "y-quat", "z-quat", "w-quat"]])
    rospy.Subscriber("odom", Odometry, odom_raw)

    # State onboard:
    data_state_onboard = np.array([["time (s)", "x-pos (m)", "y-pos (m)", "z-rot (rad)"]])
    rospy.Subscriber("messop/logger/global", StateUGV, state_onboard)

    # VICON processed:
    data_vicon_calibrated = np.array([["time (s)", "x-pos (m)", "y-pos (m)", "z-rot (rad)"]])
    rospy.Subscriber("messop/logger/vicon", StateUGV, vicon_calibrated)

    # VICON raw:
    data_vicon_raw = np.array([["time (s)", "x-pos (m)", "y-pos (m)", "z-pos (m)", "x-quat", "y-quat", "z-quat", "w-quat"]])
    rospy.Subscriber("/vicon/" + UGV_NAME + "/" + UGV_NAME, TransformStamped, vicon_raw)

    # Wheel velocities and torques:
    data_wheels = np.array([["time (s)", "left vel", "right vel", "left effort", "right effort"]])
    rospy.Subscriber("joint_state", JointState, joints)

    try:

        # Indicate the node is initialized:
        print(MSG01)

        # Wait for flag indicating experiment completion:
        rospy.wait_for_message("messop/logger/flag", MessToUGVLogger)

        # Indicate logging is initiated:
        print(MSG02)

        # Log data:
        log_data(data_calibration_parameters, "calibration_parameters.csv")
        log_data(data_control_input, "control_input.csv")
        log_data(data_imu_raw, "imu_raw.csv")
        log_data(data_odom_calibrated, "odom_calibrated.csv")
        log_data(data_odom_raw, "odom_raw.csv")
        log_data(data_state_onboard, "state_onboard.csv")
        log_data(data_vicon_calibrated, "vicon_calibrated.csv")
        log_data(data_vicon_raw, "vicon_raw.csv")
        log_data(data_wheels, "wheel_velocities_and_torques.csv")

        # Indicate logged is complete:
        print(MSG03)

    except:

        # Indicate node is shut down:
        print(MSG04)






