#!/usr/bin/env python

import rospy
from geometry_msgs.msg import TransformStamped, Twist
from mess_msgs.msg import CalibrateUGV, MessToUGVLogger, StateUGV
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Imu, JointState
from std_msgs.msg import String
import numpy as np
import time
import csv

##################################################################################

# Object name in VICON Tracker:
UGV_NAME = "TurtleBot01"

##################################################################################

MSG01 = """
Initializing TurtleBot3 onboard logger

CTRL-C to quit
-----------------------------------------
"""

MSG02 = """
Logging data to .csv files in current directory
"""

MSG03 = """
Data logged to .csv files in current directory
"""

MSG04 = """
Communication ended
"""

##################################################################################

def logData(name, head, data):
    with open(name, "w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(head)
        rows, cols = data.shape
        row = 0
        while row < rows:
            line = []
            col = 0
            while col < cols:
                appendData(line, str(data[row, col]))
                col += 1
            row += 1
            writer.writerow(line)

def appendData(array, data):
    if hasattr(array, "append"):
        array.append(data)

##################################################################################

# Calibration coefficient callback function:
def callback1(data):
    appendData(calTime, time.time())
    appendData(cal1, data.C1)
    appendData(cal2, data.C2)
    appendData(cal3, data.C3)
    appendData(cal4, data.C4)
    appendData(cal5, data.C5)
    appendData(cal6, data.C6)
    appendData(cal7, data.C7)

# Global state callback function:
def callback2(data):
    appendData(globalTime, time.time())
    appendData(globalTx, data.Tx)
    appendData(globalTy, data.Ty)
    appendData(globalRz, data.Rz)

# Calibrated VICON callback function:
def callback3(data):
    appendData(viconTime, time.time())
    appendData(viconTx, data.Tx)
    appendData(viconTy, data.Ty)
    appendData(viconRz, data.Rz)

# Calibrated Odometry callback function:
def callback4(data):
    appendData(odomTime, time.time())
    appendData(odomTx, data.Tx)
    appendData(odomTy, data.Ty)
    appendData(odomRz, data.Rz)

##################################################################################

if __name__=="__main__":

    # Initialize node:
    vicon = "/vicon/" + UGV_NAME + "/" + UGV_NAME
    coefficients = "/messop/" + UGV_NAME + "/calibration"
    rospy.init_node("messlogger_ugv")

    # Initialize calibration coefficient subscriber and data storage:
    calTime = []; cal1 = []; cal2 = []; cal3 = []; cal4 = []; cal5 = []; cal6 = []; cal7 = []
    rospy.Subscriber(coefficients, CalibrateUGV, callback1)

    # Initialize global subscriber and data storage:
    globalTime = []; globalTx = []; globalTy = []; globalRz = []
    rospy.Subscriber("/messop/" + UGV_NAME + "/global", StateUGV, callback2)

    # Initialize calibrated vicon subscriber and data storage:
    viconTime = []; viconTx = []; viconTy = []; viconRz = []
    rospy.Subscriber("/messop/" + UGV_NAME + "/vicon", StateUGV, callback3)

    # Initialize calibrated vicon subscriber and data storage:
    odomTime = []; odomTx = []; odomTy = []; odomRz = []
    rospy.Subscriber("/messop/" + UGV_NAME + "/odom", StateUGV, callback4)

    try:

        # Indicate the node is initiated:
        print(MSG01)

        # Wait for flag indicating experiment completion:
        rospy.wait_for_message("/messlogger/" + UGV_NAME, MessToUGVLogger)

        # Indicate loggings is initiated:
        print(MSG02)

        # Log calibration coefficients:
        name = "coefficients.csv"
        head = ["time (sec)", "C1", "C2", "C3", "C4", "C5", "C6", "C7"]
        data = np.array([calTime, cal1, cal2, cal3, cal4, cal5, cal6, cal7]).T
        logData(name, head, data)

        # Log global state:
        name = "globalCurr.csv"
        head = ["time (sec)", "Tx (m)", "Ty (m)", "Rz (m)"]
        data = np.array([globalTime, globalTx, globalTy, globalRz]).T
        logData(name, head, data)

        # Log calibrated VICON state:
        name = "viconCurr.csv"
        head = ["time (sec)", "Tx (m)", "Ty (m)", "Rz (m)"]
        data = np.array([viconTime, viconTx, viconTy, viconRz]).T
        logData(name, head, data)

        # Log calibrated Odometry state:
        name = "odomCurr.csv"
        head = ["time (sec)", "Tx (m)", "Ty (m)", "Rz (m)"]
        data = np.array([odomTime, odomTx, odomTy, odomRz]).T
        logData(name, head, data)        

        # Indicate logging is complete:
        print(MSG03)

    except:

        # Indicate node is shut down:
        print(MSG04)
